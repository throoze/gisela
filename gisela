#!/usr/bin/env python
# -*- coding: utf-8 -*-
# ------------------------------------------------------------
# gisela
#
# Interpretador para el lenguaje Gisela
# Julio Lopez (06-39821)
# Victor De Ponte (05-38087)
# ------------------------------------------------------------
import ply.lex as lex
import ply.yacc as yacc
from ply.lex import TOKEN
import sys
import re
from SymTable import *

# Lista de palabras reservadas del lenguaje Gisela
reserved = {
    'go':'TkGo',
    'og':'TkOg',
    'char':'TkChar',
    'bool':'TkBool',
    'int':'TkInt',
    'chr':'TkChr',
    'ord':'TkOrd',
    'isupper':'TkIsup',
    'isalpha':'TkIsal',
    'isdigit':'TkIsdig',
    'isspace':'TkIsspa',
    'xor':'TkXor',
    'and':'TkAnd',
    'or':'TkOr',
    'not':'TkNot',
    'div':'TkDiv',
    'mod':'TkMod',
    'skip':'TkSkip',
    'abort':'TkAbort',
    'read':'TkRead',
    'print':'TkPrint',
    'return':'TkReturn',
    'if':'TkIf',
    'do':'TkDo',
    'od':'TkOd',
    'proc':'TkProc',
    'var':'TkVar',
  }

# Lista de nombres de los tokens del lenguaje Gisela

tokens = [
    'TkLets',
    'TkMsg',
    'TkCaracter',
    'TkTrue',
    'TkFalse',
    'TkPotencia',
    'TkProducto',
    'TkSuma',
    'TkResta',
    'TkMenor',
    'TkMenorIgual',
    'TkMayor',
    'TkMayorIgual',
    'TkIgual',
    'TkFi',
    'TkDesIgual',
    'TkAsignacion',
    'TkParAbre',
    'TkParCierra',
    'TkGuardia',
    'TkIdent',
    'TkNumero',
#    'TkComentario',
    'TkComa',
    'TkPipe',
    'TkSecuenciador'
#    'TkComillaSimple'
           ] + list(reserved.values())

# Expresión regular para la palabra reservada "let's"
def t_TkLets(t):
    r'let\'s'
    return t

# Expresion regular para los caracteres del lenguaje Gisela
def t_TkCaracter(t):
    r'("[^"]")|(\'[^\']\')|(_.)'
    return t

# Se diseño el token Msg y el token Caracter de esta forma pensando en que no
# deberían aceptarse cosas como esta " ads" as" como parte de un mensaje o algo
# como esto ''' como un caracter. Para el caso de que la variable char sea
# inicializada en ' pensamos que debería usarse comillas dobles o underscore
# algo como "'" o _'. (En la consulta habla solo de las cadenas, pero esta
# aclaración aplica para los char también por eso se incluye como comentario en
# el código.
def t_TkMsg(t):
    r'("(\\"|[^"])*")|(\'(\\\'|[^\'])*\')'
    #r'(?:"(?:[^"\\n\\r\\\\]|(?:"")|(?:\\\\x[0-9a-fA-F]+)|(?:\\\\.))*")|(?:\'(?:[^\'\\n\\r\\\\]|(?:\'\')|(?:\\\\x[0-9a-fA-F]+)|(?:\\\\.))*\')'
    return t

def t_TkTrue(t):
    r'(T|t)((R|r)((U|u)((E|e))?)?)?'
    return t

def t_TkFi(t):
    r'fi'
    return t

def t_TkFalse(t):
    r'(F|f)((A|a)((L|l)((S|s)((E|e))?)?)?)?'
    return t

# Definiendo las expresiones regulares simples del lenguaje Gisela
#t_TkComillaSimple = r'\''
t_TkPotencia = r'\*\*'
t_TkProducto = r'\*'
t_TkSuma = r'\+'
t_TkResta = r'-'
t_TkMenor = r'<'
t_TkMenorIgual = r'<='
t_TkMayor = r'>'
t_TkMayorIgual = r'>='
t_TkIgual = r'=='
t_TkDesIgual = r'!='
t_TkAsignacion = r':='
t_TkParAbre = r'\('
t_TkParCierra = r'\)'
t_TkGuardia = r'->'
t_TkComa = r','
t_TkPipe = r'\|'
t_TkSecuenciador = r';'

# Expresion regular para los numeros del lenguaje Gisela
def t_TkNumero(t):
    r'\d+'
    if int(t.value) > 2**31-1:
        t.value = str(long(t.value))
        t.errormsg = "Gisela solo permite enteros almacenables en 32 bits. El numero:\n'" + t.value + "'\nexcede los 32 bits. Utilize numeros menores o iguales a " + str(2**31-1) + "."
        t.escadena = True
        t_error(t)
    t.value = int(t.value)
    return t

# Definicion de un comentario
def t_TkComentario(t):
    r'(//.*[\n\z])'
    t.lexer.lineno += 1

# Definicion de un identificador de variable
def t_TkIdent(t):
    r'[a-zA-Z][a-zA-Z0-9]*'
    t.type = reserved.get(t.value,'TkIdent')    # Chequea por las palabras
    return t                                    # reservadas

# Rastreo de numeros de linea
def t_newline(t):
    r'\n+'
    t.lexer.lineno += len(t.value)

# Computa las columnas.
def find_column(input,t):
    last_cr = input.rfind('\n',0,t.lexpos)
    # if last_cr < 0:
    #     last_cr = 0
    column = (t.lexpos - (last_cr + 1))
    if column < 0:
        column = 0
    return column

# Caracteres a ser ignorados
t_ignore  = ' \t'

# Definimos flag global para indicar que hay errores lexicos
lexerror = 0

# Manejador de Errores
def t_error(t):
    global lexerror
    lexerror = 1
    if hasattr(t, 'escadena'):
        unespected = "cadena de caracteres inesperada"
    else:
        unespected = "caracter inesperado"
    if hasattr(t, 'errormsg'):
        print "Error: %s '%s' en la fila '%d', columna '%d'.\n%s\n" %(unespected,t.value,t.lineno,find_column(data,t),t.errormsg)
    else:
        print "Error: %s '%s' en la fila '%d', columna '%d'\n" %(unespected,t.value[0],t.lineno,find_column(data,t))
    t.lexer.skip(1)

# Se construye el lexer
lexer = lex.lex()

# Le pasa la entrada al lexer
argc = len(sys.argv)
if argc < 2 :
    print ("GiSeLa:\nError: Debe ingresar el nombre del archivo a procesar")
    exit()
elif argc > 2 :
    print ("GiSeLa:\nError: Ud introdujo parámetros de más. Debe ingresar"
           +" sólo el nombre del archivo a procesar.")
    exit()
# p = re.compile('\w*\.gsl')
# if not p.match(sys.argv[1]) :
#     print ("GiSeLa:\nError: El archivo a procesar debe tener la extensión"
#            +" '.gsl'")
#     exit()
try:
    archi=open(sys.argv[1],'r')
except Exception, e:
    print ("GiSeLa:\nError: No se pudo abrir el archivo\n\t'"
           + sys.argv[1] + "'\nExcepción:")
    print unicode(e)
    exit()
data=archi.read()
archi.close()

##########################################################
########### Construcción y corrida del Lexer #############
##########################################################

# # Tokenizador
# lexer.input(data)
# output = ""
# while True:
#     tok = lexer.token()
#     if not tok: break
#     output = (output + str(tok.type) + " " + '"' + str(tok.value) + '"' + " "
#     + "(Linea " + str(tok.lineno) + "," + " Columna "
#     + str(find_column(data,tok)) + ")" + "\n")
# #En caso de que existan caracteres ilegales los tokens no son mostrados
# if lexerror == 0:
#     print output
# #print output
######################## Hasta aqui el lexer ##########################

##########################################################
################### Gramática Legible ####################
##########################################################

    # ''' gisela : globaldec main '''

    # ''' globaldec : lglobals
    #               | lambda
    # '''

    # ''' lglobals : globals
    #              | lglobals globals
    # '''

    # ''' globals : globvardec
    #             | procdef
    # '''

    # ''' globvardec : vardec TkSecuenciador
    # '''

    # ''' procdef : TkProc TkIdent TkParAbre larg TkParCierra localdec inst
    # '''

    # ''' larg : lambda
    #          | args
    # '''

    # ''' args : arg
    #          | args TkComa arg '''

    # ''' arg : tvar type TkIdent '''

    # ''' tvar : TkVar
    #          | lambda '''

    # ''' main : TkLets block '''

    # ''' block : TkGo localdec instructions TkOg '''

    # ''' instructions : linst
    #                  | lambda
    # '''

    # ''' localdec : localvars TkSecuenciador
    #              | lambda
    # '''

    # ''' localvars : vardec
    #               | localvars TkSecuenciador vardec
    # '''

    # ''' vardec : type lid'''

    # ''' type : TkChar
    #          | TkBool
    #          | TkInt '''

    # ''' lid : TkIdent
    #         | lid TkComa TkIdent '''

    # ''' linst : inst
    #           | linst TkSecuenciador inst
    # '''

    # ''' inst : simple
    #          | block
    #          | selector
    #          | repeat
    # '''

    # ''' simple : TkSkip
    #            | TkAbort
    #            | TkReturn
    #            | asign
    #            | io
    #            | proc '''

    # ''' asign : TkIdent TkAsignacion exp
    #           | TkIdent TkComa asign TkComa exp '''

    # ''' exp : boolexp
    #         | arexp
    #         | char '''

    # ''' boolexp : TkTrue
    #             | TkFalse
    #             | TkIdent
    #             | boolexp boolop boolexp
    #             | TkNot boolexp
    #             | arexp comp arexp
    #             | char comp char
    #             | isop char
    #             | TkParAbre boolexp TkParCierra '''

    # ''' boolop : TkXor
    #            | TkAnd
    #            | TkOr '''

    # ''' comp : TkMayor
    #          | TkMayorIgual
    #          | TkMenor
    #          | TkMenorIgual
    #          | TkIgual
    #          | TkDesIgual '''

    # ''' arexp : arexp TkSuma arexp
    #           | arexp TkResta arexp
    #           | arexp TkProducto arexp
    #           | arexp TkDiv arexp
    #           | arexp TkMod arexp
    #           | arexp TkPotencia arexp
    #           | TkParAbre arexp TkParCierra
    #           | TkIdent
    #           | TkNumero
    #           | TkOrd char
    #           | TkResta arexp %prec UMINUS '''

    # ''' char : TkChr arexp
    #          | TkCaracter
    #          | TkIdent '''

    # ''' isop : TkIsup
    #          | TkIsal
    #          | TkIsdig
    #          | TkIsspa '''

    # ''' io : TkRead msg TkIdent
    #        | TkPrint msg TkIdent '''

    # ''' msg : TkMsg
    #         | TkCaracter
    #         | lambda '''

    # ''' proc : TkIdent TkParAbre lexp TkParCierra '''

    # ''' lexp : exp
    #          | lexp TkComa exp '''

    # ''' guarded : boolexp TkGuardia inst '''

    # ''' lguarded : guarded
    #              | lguarded TkPipe guarded '''

    # ''' selector : TkIf lguarded TkFi '''

    # ''' repeat : TkDo lguarded TkOd '''

    # ''' lambda : '''


##########################################################
######### Reglas de asociatividad y precedencia ##########
##########################################################

precedence = (
    ('nonassoc','TkXor','TkMayor','TkMayorIgual','TkMenor','TkMenorIgual','TkIgual','TkDesIgual'),
    ('left', 'TkSuma', 'TkResta'),
    ('left', 'TkProducto'),
    ('right', 'TkDiv', 'TkMod'),
    ('right', 'TkPotencia'),
    ('right', 'UMINUS'),
)

##########################################################
###### Reglas de la gramática. Inicio del parser: ########
##########################################################

def p_gisela(p):
    ''' gisela : globaldec main '''
    pass

def p_globaldec(p):
    ''' globaldec : lglobals
                  | lambda
    '''
    pass

def p_lglobals(p):
    ''' lglobals : globals
                 | lglobals globals
    '''
    pass

def p_globals(p):
    ''' globals : globvardec
                | procdef
    '''
    pass

def p_globvardec(p):
    ''' globvardec : vardec TkSecuenciador
    '''
    pass

def p_procdef(p):
    ''' procdef : TkProc TkIdent TkParAbre larg TkParCierra localdec inst
    '''
    pass

def p_larg(p):
    ''' larg : lambda
             | args
    '''
    pass

def p_args(p):
    ''' args : arg
             | args TkComa arg '''
    pass

def p_arg(p):
    ''' arg : tvar type TkIdent '''
    pass

def p_tvar(p):
    ''' tvar : TkVar
             | lambda '''
    pass

def p_main(p):
    ''' main : TkLets block '''
    pass
#     a = SymTable()
# ## La referencia de una tabla se puede hacer insert(self,1referencia1,referencia,funcion,funcionExt,bloque,bloqueExt)
# ## de este modo a["1referencia1"] devuelve la referencia de una tabla.
#     a.insert("1referencia1","referencia",None,None,"a","NULL")
#     pilaActual.append(a)
#     print "entre en el main"

def p_block(p):
    ''' block : TkGo localdec instructions TkOg '''
    pass
#     if len(pilaActual)>1:
#         ## estoy en un bloque distinto al main
#         b = SymTable()#creo una symtable
#         auxTabla = pilaActual.pop()#me traigo la tabla del bloque "actual" (el anterior a este que recien comienza obvio)
#         pilaActual.append(auxTabla)#lo vuelvo a meter en la pila para no fockear nada
#         enTab = auxPila.find("1referencia1")#esto es para probar a ver si puedo obtener la cadena de referencias en cualquier punto
#         print "Aca primera referencia "
#         print enTab
# #        b.insert() ## aca va un insert de la referencia de la tabla de este bloque (b) a la tabla auxTabla que es la tabla del bloque "padre"

def p_instructions(p):
    ''' instructions : linst
                     | lambda
    '''
    pass

def p_localdec(p):
    ''' localdec : localvars TkSecuenciador
                 | lambda
    '''
    pass

def p_localvars(p):
    ''' localvars : vardec
                  | localvars TkSecuenciador vardec
    '''
    pass

def p_vardec(p):
    ''' vardec : type lid'''
    pass

def p_type(p):
    ''' type : TkChar
             | TkBool
             | TkInt '''
    pass

def p_lid(p):
    ''' lid : TkIdent
            | lid TkComa TkIdent '''
    pass

def p_linst(p):
    ''' linst : inst
              | linst TkSecuenciador inst
    '''
    pass

def p_inst(p):
    ''' inst : simple
             | block
             | selector
             | repeat
    '''
    pass

def p_simple(p):
    ''' simple : TkSkip
               | TkAbort
               | TkReturn
               | asign
               | io
               | proc '''
    pass

def p_asign(p):
    ''' asign : TkIdent TkAsignacion exp
              | TkIdent TkComa asign TkComa exp '''
    pass

def p_exp(p):
    ''' exp : boolexp
            | arexp
            | char '''
    pass

def p_boolexp(p):
    ''' boolexp : TkTrue
                | TkFalse
                | TkIdent
                | boolexp boolop boolexp
                | TkNot boolexp
                | arexp comp arexp
                | char comp char
                | isop char
                | TkParAbre boolexp TkParCierra '''
    pass

def p_boolop(p):
    ''' boolop : TkXor
               | TkAnd
               | TkOr '''
    pass

def p_comp(p):
    ''' comp : TkMayor
             | TkMayorIgual
             | TkMenor
             | TkMenorIgual
             | TkIgual
             | TkDesIgual '''
    pass

def p_arexp(p):
    ''' arexp : arexp TkSuma arexp
              | arexp TkResta arexp
              | arexp TkProducto arexp
              | arexp TkDiv arexp
              | arexp TkMod arexp
              | arexp TkPotencia arexp
              | TkParAbre arexp TkParCierra
              | TkIdent
              | TkNumero
              | TkOrd char
              | TkResta arexp %prec UMINUS '''
    pass


def p_char(p):
    ''' char : TkChr arexp
             | TkCaracter
             | TkIdent '''
    pass

def p_isop(p):
    ''' isop : TkIsup
             | TkIsal
             | TkIsdig
             | TkIsspa '''
    pass

def p_io(p):
    ''' io : TkRead msg TkIdent
           | TkPrint msg TkIdent '''
    pass

def p_msg(p):
    ''' msg : TkMsg
            | TkCaracter
            | lambda '''
    pass

def p_proc(p):
    ''' proc : TkIdent TkParAbre lexp TkParCierra '''
    pass

def p_lexp(p):
    ''' lexp : exp
             | lexp TkComa exp '''
    pass

def p_guarded(p):
    ''' guarded : boolexp TkGuardia inst '''
    pass

def p_lguarded(p):
    ''' lguarded : guarded
                 | lguarded TkPipe guarded '''
    pass

def p_selector(p):
    ''' selector : TkIf lguarded TkFi '''
    pass

def p_repeat(p):
    ''' repeat : TkDo lguarded TkOd '''
    pass

def p_lambda(p):
    ''' lambda : '''
    pass

# Error rule for syntax errors
def p_error(p):
    if not p:
        print "Error: error sintáctico: 'EOF' inesperado."
    else:
        print "Error: error sintáctico en el token '",p.type,"', con valor '",p.value,"', ubicado en la linea ",p.lineno, ", columna ", find_column(data,p)


##########################################################
########### Construcción y corrida del Parser ############
##########################################################

# Build the parser
parser = yacc.yacc()

pilaActual = []

# result = parser.parse("let's go print 'wepale' v og ; int v;")
result = parser.parse(data)
# print result


##########################################################
## Verificación de errores de variables usando SymTable ##
##########################################################
